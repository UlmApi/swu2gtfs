# swu2gtfs

This piece of.. code intends to make use of time table information provided by the Stadtwerke Ulm (SWU), which is the transport authority responsible for most of Ulm's public transit system. As of now, there is no standardized interface to get hold of said time table information, so we use the CSV exports that are created anyways for some poor person typesetting said files into pocket time tables.

I tried to comment rather liberally, but am a poor programmer, so both comments and variables are a wild mixture of German and English. I don't think this code might be of any help to anyone outside Ulm anyways, but whatever.

## usage

Run it in java and provide a path to a directory filled to the brim with SWU's time table CSV files (and nothing else). Information about the route names will be expected through the file name. More documentation about the table layout, naming conventions and so on is available in the transport section of the ulmapi.de wiki system.

## what it does

You'll end up with three files: shapes.txt, trips.txt and stop_times.txt. All of them should be valid GTFS files.

## what it doesn't

You will still need to provide the rest of all the necessary files: 

* agency.txt and routes.txt: Shouldn't be a problem 
* stops.txt: Can be extracted from the KMZ files provided on ulmapi.de
* calendar.txt: Is pretty static. Right now, "0" is weekdays, "2" saturdays and "3" sundays. The rest of the schedule (Ss, Sf, Fa, etc.) goes according to the plain text notes in the CSV files. Refer to ulmapi.de as to what they mean.
* frequencies.txt: Requires manual work: Compare the CSV to the printed schedule, delete the recurring trips before parsing and manually insert according entries into frequencies.txt
* calendar_dates.txt: This one is tricky -- i.e., right now, it will take manual work.

## wishlist
* automatic recognition of recurring trips and managing those into frequencies.txt
* some way of parsing SWU's (different) calendar classification for calendar_dates.txt

## further reading
* GTFS specification: https://code.google.com/intl/de-DE/transit/spec/transit_feed_specification.html

## changelog
* 2011-12-18 first published version
* 2012-08-24 added method to compare trips and group them when the follow the same route (for shapefiles)
* 2012-08-25 requesting XML output from DING.eu and extracting route shapes for shapes.txt
* 2012-09-04 also taking destination IDs from the XML output into account and using it for trip headsign information
* 2012-09-14 Bugfix: Mixed up lat and long for shapes.txt output made route shapes appear halfway across the globe :>
